# In exceptions.py
from rest_framework.views import exception_handler
from rest_framework.response import Response
from rest_framework import status
from rest_framework.exceptions import ValidationError, NotFound, PermissionDenied, AuthenticationFailed

def custom_exception_handler(exc, context):
    # Call REST framework's default exception handler first,
    # to get the standard error response.
    response = exception_handler(exc, context)

    if isinstance(exc, ValidationError):
        return Response(
            {
                'error': 'Validation failed',
                'details': exc.detail
            },
            status=status.HTTP_400_BAD_REQUEST
        )

    if isinstance(exc, NotFound):
        return Response(
            {
                'error': 'Resource not found',
                'details': str(exc)
            },
            status=status.HTTP_404_NOT_FOUND
        )

    if isinstance(exc, PermissionDenied):
        return Response(
            {
                'error': 'Permission denied',
                'details': str(exc)
            },
            status=status.HTTP_403_FORBIDDEN
        )

    if response is None:
        return Response(
            {
                'error': 'An unexpected error occurred',
                'details': str(exc)
            },
            status=status.HTTP_500_INTERNAL_SERVER_ERROR
        )

    # return if a response was generated by the default exception handler
    return response
